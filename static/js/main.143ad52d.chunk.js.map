{"version":3,"sources":["components/Visual.js","App.js","serviceWorker.js","index.js"],"names":["Visual","props","bubbleSort","arr","sortedArray","state","numbers","swap","limit","length","i","myLoop","setInterval","map","bar","number","beingSorted","setState","done","clearInterval","time","testFunction","setTimeout","console","log","this","prevProps","prevState","startSort","className","index","key","style","height","Component","App","generateNumbers","newArray","num","Math","floor","random","push","setSort","sort","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PA0FeA,G,kBAvFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAkBRC,WAAa,SAAAC,GAGX,IAFA,IAAIC,EAAc,EAAKC,MAAMC,QACzBC,GAAO,EAFO,aAIhBA,GAAO,EACP,IAAMC,EAAQJ,EAAYK,OAAS,EAC/BC,EAAI,EAGJC,EAASC,aAAY,WAOvB,IANAR,EAAcA,EAAYS,KAAI,SAAAC,GAC5B,MAAO,CAAEC,OAAQD,EAAIC,OAAQC,aAAa,OAEhCN,GAAGM,aAAc,EAC7BZ,EAAYM,EAAI,GAAGM,aAAc,EACjC,EAAKC,SAAS,CAAEX,QAASF,IACrBA,EAAYM,EAAI,GAAGK,OAASX,EAAYM,GAAGK,OAAQ,CAAC,IAAD,EACd,CACrCX,EAAYM,EAAI,GAChBN,EAAYM,IAFbN,EAAYM,GADwC,KACpCN,EAAYM,EAAI,GADoB,KAKrDH,GAAO,IAETG,EACQF,IACFD,EACF,EAAKL,aAEL,EAAKe,SAAS,CAAEC,MAAM,IAExBC,cAAcR,MAEf,EAAKN,MAAMe,MAEd,EAAKH,SAAS,CAAEX,QAASF,KA/BpBG,GAAO,KAtBG,EAyDnBc,aAAe,WACb,IADoB,IAAD,WACVX,GACPY,YAAW,WACTC,QAAQC,IAAId,KACX,MAHIA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,IAxDT,EAAKL,MAAQ,CACXC,QAAS,GACTc,KAAM,GACNF,MAAM,GALS,E,iFAUjBO,KAAKR,SAAS,CAAEX,QAASmB,KAAKxB,MAAMK,Y,yCAGnBoB,EAAWC,IACA,IAAxBD,EAAUE,YAAgD,IAAzBH,KAAKxB,MAAM2B,WAC9CH,KAAKvB,e,+BAkDC,IAAD,OACP,OAAIuB,KAAKpB,MAAMC,QAEX,oCACE,yBAAKuB,UAAU,UACZJ,KAAKpB,MAAMC,QAAQO,KAAI,SAACC,EAAKgB,GAAN,OACtB,yBACEC,IAAKD,EACLD,UAAS,cAASf,EAAIE,aAAe,cAA5B,YAA6C,EAAKX,MACxDa,MAAQ,YACXc,MAAO,CAAEC,OAAO,GAAD,OAAkB,EAAbnB,EAAIC,OAAT,cAOlB,2C,GAnFQmB,cCyCNC,E,YAtCb,WAAYlC,GAAQ,IAAD,8BACjB,4CAAMA,KAURmC,gBAAkB,WAEhB,IADA,IAAIC,EAAW,GACN3B,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAI4B,EAAMC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAC3CJ,EAASK,KAAK,CAAE3B,OAAQuB,EAAKtB,aAAa,IAE5C,EAAKC,SAAS,CAAEX,QAAS+B,KAjBR,EAoBnBM,QAAU,WACR,EAAK1B,SAAS,CAAE2B,MAAM,KAnBtB,EAAKvC,MAAQ,CACXC,QAAS,GACTsC,MAAM,GAJS,E,iFAQjBnB,KAAKW,oB,+BAiBL,OAAIX,KAAKpB,MAAMC,QAAQG,OAEnB,oCACE,4BAAQoC,QAASpB,KAAKkB,SAAtB,aACA,kBAAC,EAAD,CAAQrC,QAASmB,KAAKpB,MAAMC,QAASsB,UAAWH,KAAKpB,MAAMuC,QAIxD,+C,GAlCKV,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.143ad52d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Visual extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: [],\n      time: 30,\n      done: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ numbers: this.props.numbers });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.startSort === false && this.props.startSort === true) {\n      this.bubbleSort();\n    }\n  }\n\n  bubbleSort = arr => {\n    let sortedArray = this.state.numbers;\n    let swap = true;\n    while (swap) {\n      swap = false;\n      const limit = sortedArray.length - 1;\n      let i = 1;\n\n      // eslint-disable-next-line no-loop-func\n      let myLoop = setInterval(() => {\n        sortedArray = sortedArray.map(bar => {\n          return { number: bar.number, beingSorted: false };\n        });\n        sortedArray[i].beingSorted = true;\n        sortedArray[i - 1].beingSorted = true;\n        this.setState({ numbers: sortedArray });\n        if (sortedArray[i - 1].number > sortedArray[i].number) {\n          [sortedArray[i], sortedArray[i - 1]] = [\n            sortedArray[i - 1],\n            sortedArray[i]\n          ];\n          swap = true;\n        }\n        i++;\n        if (i > limit) {\n          if (swap) {\n            this.bubbleSort();\n          } else {\n            this.setState({ done: true });\n          }\n          clearInterval(myLoop);\n        }\n      }, this.state.time);\n\n      this.setState({ numbers: sortedArray });\n    }\n  };\n\n  testFunction = () => {\n    for (let i = 0; i < 10; i++) {\n      setTimeout(() => {\n        console.log(i);\n      }, 200);\n    }\n  };\n\n  render() {\n    if (this.state.numbers) {\n      return (\n        <>\n          <div className=\"visual\">\n            {this.state.numbers.map((bar, index) => (\n              <div\n                key={index}\n                className={`bar ${bar.beingSorted && 'current-bar'} ${this.state\n                  .done && 'done-bar'}`}\n                style={{ height: `${bar.number * 5}px` }}\n              ></div>\n            ))}\n          </div>\n        </>\n      );\n    } else {\n      return <h1>Hold on</h1>;\n    }\n  }\n}\n\nexport default Visual;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Visual from './components/Visual';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: [],\n      sort: false\n    };\n  }\n  componentDidMount() {\n    this.generateNumbers();\n  }\n\n  generateNumbers = () => {\n    let newArray = [];\n    for (let i = 0; i < 30; i++) {\n      let num = Math.floor(Math.random() * 85) + 10;\n      newArray.push({ number: num, beingSorted: false });\n    }\n    this.setState({ numbers: newArray });\n  };\n\n  setSort = () => {\n    this.setState({ sort: true });\n  };\n\n  render() {\n    if (this.state.numbers.length) {\n      return (\n        <>\n          <button onClick={this.setSort}>Visualize</button>\n          <Visual numbers={this.state.numbers} startSort={this.state.sort} />\n        </>\n      );\n    } else {\n      return <h1>Hold on bro</h1>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}